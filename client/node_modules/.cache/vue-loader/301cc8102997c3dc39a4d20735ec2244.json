{"remainingRequest":"/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/BookForm.vue?vue&type=style&index=0&id=a4f85e06&scoped=true&lang=css&","dependencies":[{"path":"/app/src/components/BookForm.vue","mtime":1586122746000},{"path":"/app/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI2Zvcm0gewogbWFyZ2luLXRvcDogMTVweDsKfQo="},{"version":3,"sources":["BookForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuIA;AACA;AACA","file":"BookForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n <div id=\"form\">\n  <BookInfo :book=\"book\"></BookInfo>\n  <hr />\n  <el-form ref=\"form\" :model=\"form\" :rules=\"rules\" label-width=\"120px\" >\n   <div>\n    <div v-html=\"memomark\" />\n   </div>\n   <el-form-item label=\"メモ\" prop=\"memo\">\n    <el-input type=\"textarea\" size=\"large\" v-model=\"book.memo\"></el-input>\n    <!--<el-input type=\"textarea\" size=\"large\" v-model=\"form.memo\"></el-input> -->\n   </el-form-item>\n   <el-form-item>\n    <el-button type=\"primary\" @click=\"onsubmit\">Register</el-button>\n    <el-button type=\"primary\" @click=\"ondelete\">Delete</el-button>\n   </el-form-item>\n  </el-form>\n </div>\n</template>\n\n<script>\nimport {mapGetters, mapActions } from 'vuex'\nimport BookInfo from '@/components/BookInfo.vue'\nimport { UPDATE_CURRENT } from '@/store/mutation-types'\n//import { UPDATE_CURRENT, UPDATE_BOOK, DELETE_BOOK } from '@/store/mutation-types'\n\nimport axios from \"axios\";\nimport marked from 'marked'\n\nexport default {\n name: 'book-form',\n components: {\n  BookInfo\n },\n data() {\n  return {\n   book: {},\n   form: {\n    memo: ''\n   },\n   rules: {\n    memo: [\n     //{ required: true, message: 'Input memo.', trigger: 'blur' }\n    ]\n   }\n  }\n },\n computed: {\n  ...mapGetters( [ 'current' ]),\n  //...mapGetters( [ 'current', 'getBookById' ]),\n  memomark: function(){\n   return marked(this.book.memo)\n   //return marked(this.form.memo)\n  }\n },\n created() {\n  if (!this.current) {\n   this.$router.push('/')\n  }\n  this.book = Object.assign({}, this.current)\n },\n mounted() {\n  //let b = this.getBookById(this.book.id)\n // if (b) {\n   //this.form.read = b.read\n   //this.form.memo = this.current.memo\n  //}\n },\n methods: {\n // ...mapActions([UPDATE_BOOK, UPDATE_CURRENT, DELETE_BOOK]),\n  ...mapActions([ UPDATE_CURRENT]),\n  onsubmit() {\n   //this.$refs['form'].validate((valid) => {\n   // if (valid) {\n    /* this[UPDATE_BOOK](\n      Object.assign({}, this.book, this.form)\n     )*/\n\n     //UPDATE method\n      const params = {\n       uid: this.book.id,\n       title: this.book.title,\n       author: this.book.author,\n       price: String(this.book.price),\n       publisher: this.book.publisher,\n       published: this.book.published,\n       image: this.book.image,\n       imagetype: this.book.imagetype,\n       url: this.book.url,\n       memo: this.book.memo\n      }\n     axios.post('http://localhost:8888/create', params )\n\n     this[UPDATE_CURRENT](null)\n     this.$notify({\n      title: 'Reading Recorder',\n      message: this.$createElement('p', {style: 'color: #009'},\n       'Success!'),\n       duration: 2000\n     })\n     //this.form.read = new Date()\n     //this.form.memo = ''\n     this.$router.push('/')\n    //}\n   //})\n  },\n  ondelete() {\n   //this.$refs['form'].validate((valid) => {\n   // if (valid) {\n    /* this[DELETE_BOOK](\n      Object.assign({}, this.book, this.form)\n     )*/\n\n     //DELETE method\n     axios.delete('http://localhost:8888/delete?id='+this.current.id)\n\n     this[UPDATE_CURRENT](null)\n     this.$notify({\n      title: 'Delete Data',\n      message: this.$createElement('p', {style: 'color: #009'},\n       'Success!'),\n       duration: 2000\n     })\n     //this.form.read = new Date()\n     //this.form.memo = ''\n     this.$router.push('/')\n    //}\n   //})\n  }\n }\n\n}\n</script>\n\n<style scoped>\n#form {\n margin-top: 15px;\n}\n</style>\n"]}]}